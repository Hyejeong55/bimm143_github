---
title: "Class08"
author: "Hyejeong Choi (PID: A16837133)"
format: pdf
toc: TRUE
---

## Background
This source provides materials for a class mini-project focused on unsupervised learning analysis of human breast cancer cell data. Students will conduct principal component analysis (PCA) for dimensionality reduction and then apply hierarchical and k-means clustering techniques. The project involves exploratory data analysis, interpreting PCA results, evaluating clustering performance by comparing cluster assignments to actual diagnoses, and optionally combining PCA with clustering. The goal is to identify potential groupings within the cell data based on their characteristics without prior knowledge of malignancy, and the project concludes with an application of the PCA model to classify new patient samples.

## Data Import

Our data comes from the U. of Wisconsin Medical Center.

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
```

> Q1. How many patients/samples are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

```{r}
sum(wisc.df$diagnosis == "M")
```

> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.df)
```

```{r}
length(grep("mean", colnames(wisc.df), value = T))
```

There is a diagnosis column that is the clinician consensus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering

Let's try a `hclust()`

```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()`

```{r}
grps <- cutree(hc, k=2)
```

How many individuals are in each cluster?

```{r}
table(grps)
```

```{r}
table(diagnosis)
```

We can generate a cross-table that compares our cluster `grps` vector with our `diagnosis` vector values.

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis

### The Importance of Data Scaling

The main function for PCA in base R is `prcomp()`. It has a default input parameter of `scale=FALSE`.

```{r}
#prcomp()
head(mtcars)
```

We could do a PCA of this data as is and it could be mis-leading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

Let's look at the mean values of each column and their standard deviation.

```{r}
colMeans(mtcars)
```

```{r}
apply(mtcars, 2, sd)
```

We can "scale" this data before PCA to get a much better representation and analysis of all the columns.

```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (a.k.a score plot, ordienation plot, or PC1 vs PC2 plot). The "loadings plot" shows how the original variables contribute to the new PCs.

A loadings plot of the unscaled PCA results:

```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

Loadings plot of the scaled data.

```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc.scale$rotation)) +
  geom_col()
```

PC plot of scaled PCA results:

```{r}
library(ggrepel)

ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) +
  geom_point() +
  geom_text_repel()
```

> **Key point**: In general, we will set `scale=TRUE` when we do PCA. This is not the default, but probably should be...

We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint we do!

### PCA of wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

To see how well PCA is doing here in terms of capturing the variance (or spread) in the data, we can use the `summary()` function.

```{r}
summary(wisc.pr)
```

Let's make the main PC1 vs PC2

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)") +
  ylab("PC2 (19%)")
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.3% of the original variance is captured by PC1.

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs are required to capture 70% of the original variance.

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs are required to capture 90% of the original variance.

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

```{r}
biplot(wisc.pr)
```

The biplot of the data is not easy to understand because there is too much crowding of the labels, the labels of the points have no significance, and there is no legend describing what the different colors represent.

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
#scatter plot for PC1 vs PC2

plot(wisc.pr$x , col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```

```{r}
#scatter plot for PC1 vs PC3

plot(wisc.pr$x[,c(1,3)], col = diagnosis, 
     xlab = "PC1", ylab = "PC3")
```

Both plots have the "B" and "M" groups clustered at similar regions of the plot. But, PC3 has a more positive skew in variation and PC2 has a more negative skew in variation. There are also less overlaps between the two clusters in PC1 vs PC2 than in PC1 vs PC3.

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean",1]
```

The PC1 for "concave.points_mean" is -0.2608538.

> Q10. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
data.scaled <- scale(wisc.data)
data.dist <- dist(data.scaled)
wisc.hclust <- hclust(data.dist, method="complete")
plot(wisc.hclust)
abline(wisc.hclust, h=19, col="red", lty=2)
```

At height 19, the clustering model has 4 clusters.

## 5. Combining Methods

We can take our PCA results and use them as a basis set for other analysis such as clustering.

### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:2]), method="ward.D2")
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups):

```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```

How do I cluster grps compare to the expert diagnosis

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```

> Q12. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

"ward.D2" is my favorite method because the clusters are created with most of the diagnosis data points correctly separated and it decreases the variance within the clusters. The other methods result in more skewed clusters where the distribution of the diagnosis data points within each cluster is not as correct as the "ward.D2" method and there is a massive difference in the number of data points in each cluster.

> Q13. How well does the newly created model with four clusters separate out the two diagnoses?

The model separates the diagnoses fairly well because most of the "B" and "M" are in separate groups. However, there are still a many false positives for the incorrect diagnosis. For example, there are still 35 "M" that are mixed with the "B" diagnosis and 18 "B" that are mixed with the "M" diagnosis.

> Q14. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

They did really badly. We do much better after PCA - the new PCA variables (what we call basis set) gives us much better separation of "M" and "B".

## 7. Prediction

We can use our PCA model for the analysis of new "unseen"data. In this case from U. Mich.

```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=pc.grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q16. Which of these new patients should we prioritize for follow up based on your results?

The patients in cluster 2 because there is more variation among those points than in cluster 1.






