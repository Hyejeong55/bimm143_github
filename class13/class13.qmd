---
title: "Class 13: RNASeq Analysis"
author: "Hyejeong Choi (PID: A16837133)"
format: pdf
toc: TRUE
---

# Background

Today we will analyze some RNA sequencing data on the effects of a common steroid drug on airway cell lines.

There are two main inputs we need for this analysis:

- `countData`: counts for genes in rows with experiments in the columns.
- `colData`: or metadata that tells us about the design of the experiment (i.e. what is in the columns of `countData`)

# Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)

metadata <- read.csv("airway_metadata.csv")
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

There are 38,694 genes in the dataset.

> Q2. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)
```

```{r}
sum(metadata$dex == "control")
```

There are 4 control cell lines.

# Toy Differential gene expression

Let's try finding the average or mean of the "control" and "treated" columns and see if they differ.

- 1. First we need to find all "control" columns
- 2. Extract just the "control" values for each gene
- 3. Calculate the `mean()` for each gene "control" values

```{r}
metadata
```

The column names of the `counts`are the same as the names of the id in metadata.

```{r}
colnames(counts) == metadata$id
```

The $dex column tells me whether we have "control" or "treated". 

```{r}
# control.inds store TRUE or FALSE for the row based on if it is a control or treated
control.inds <- metadata$dex == "control"
```

Extract just the "control" values for all genes

```{r}
# control.counts stores the genes from the counts dataset that are TRUE for "control" in the metadata$dex column
control.counts <- counts[,control.inds]

head(control.counts)
```

> Q3. Calculate the mean value for each gene in the "control" columns

```{r}
control.mean <- rowMeans(control.counts)

head(control.mean)
```

> Q4. Do the same for "treated" to get a `treated.mean`.

```{r}
treated.inds <- metadata$dex == "treated"
```

```{r}
treated.counts <- counts[, treated.inds]

head(treated.counts)
```

```{r}
treated.mean <- rowMeans(treated.counts)

head(treated.mean)
```

Let's store our mean values together in a data.frame for easier book-keeping.

```{r}
meancounts <- data.frame(control.mean, treated.mean)

head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts)
```

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.3)
```

The straight, linear line means no change between the two groups. The higher the value for a group, the more expression that was measured in that group.

We need to log transform this data as it is so heavily skewed.

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```

```{r}
ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.3) +
  scale_x_log10() +
  scale_y_log10()
```

Use log2 to find the change in expression between the treated and control groups. If there is no change, then the log2 value is zero.

```{r}
# TREATED/CONTROL

log2(20/20)
```

If the expression doubled, then the log2 value will be 1.

```{r}
log2(40/20)
```
If the expression is half the amount, then the log2 value will be a -1.

```{r}
log2(10/20)
```

A common "rule-of-thumb" is to focus on genes with a log2 "fold-change" of +2 as so-called UP REGULATED and -2 as DOWN REGULATED

Let's add a log2 fold-change value to our`meancounts` data.frame

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

> Q7. Remove any "zero count" genes from our dataset for further analysis.

```{r}
to.keep <- rowSums(meancounts[,1:2] == 0) == 0
sum(to.keep)
```

```{r}
mycounts <- meancounts[to.keep,]

head(mycounts)
```

> Q8. How many genes are "up" regulated at a log2fc threshold of +2?

```{r}
sum(mycounts$log2fc >= 2)
```

> Q9. How many genes are "down" regualted at a log2fc threshold of -2?

```{r}
sum(mycounts$log2fc <= -2)
```

> Q10. Do you trust these results? Why or why not?

No, we need to find the p-value to determine the statistical significance of the data.

# DESeq2 analysis

Let's do this properly and consider the stats - are the differences in the means significant?

We will use DESeq2 to do this:

```{r, message=FALSE}
library(DESeq2)
```

The first function we will use from this package sets up the input in the particular format that DESeq wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

We can now run our DESeq analysis 

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

Peek at results

```{r}
head(res)
```

# Result figure: Volcano Plot

Plot of the Log2FC vs p-value

```{r}
plot(res$log2FoldChange, res$padj)
```

This p-value data is again heavily skewed, so let's log transform it

```{r}
plot(res$log2FoldChange, log(res$padj))
```

We can flip the y-axis by adding a minus sign. This will make it easier to interpret.

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=-2, col="red")
abline(v=2, col="red")
abline(h=-log(0.05), col="red")
```

Let's add some color

```{r}
mycols = rep("grey", nrow(res))
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$log2FoldChange >= 2] <- "blue"
mycols[res$padj >= 0.05] <- "grey"

plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=-2, col="red")
abline(v=2, col="red")
abline(h=-log(0.05), col="red")
```

> Q. Make a ggplot volcano plot with colors and lines as annotations along with nice axis labels.

```{r}
ggplot(as.data.frame(res)) +
  aes(x=log2FoldChange, -log(padj)) +
  geom_point(col = mycols) +
  geom_vline(xintercept = c(-2, 2), col="red") +
  geom_hline(yintercept = -log(0.05), col="red") +
  theme_bw() +
  labs(title="Volcano Plot of Log2 Fold change and adjusted P-value", x="Log2 Fold Change", y="-log(adjusted P-value)")
  
```

The points that are higher up have a lower p-value. These are the important points.

# Gene symbols and different database IDs

We first need to add gene symbols (e.g. HBB etc.) so we know what genes we are dealing with. We need to "translate" between ENSEMBLE ids that we have in the rownames of `res`.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

What different database ID types can I translate between.

```{r}
columns(org.Hs.eg.db)
```

Let's "map" between "ENSEMBL" and "SYMBOL" (i.e. gene symbol).

```{r}
res$symbol <- mapIds(x=org.Hs.eg.db, 
                      keys=rownames(res), 
                      keytype= "ENSEMBL", 
                      column="SYMBOL")

head(res)
```

Add a few more ID mappings including "GENENAME" and "ENTREZID"

```{r}
res$name <- mapIds(x=org.Hs.eg.db, 
                      keys=rownames(res), 
                      keytype= "ENSEMBL", 
                      column="GENENAME")

res$entrez <- mapIds(x=org.Hs.eg.db, 
                      keys=rownames(res), 
                      keytype= "ENSEMBL", 
                      column="ENTREZID")
head(res)
```

Be sure to save our annotated results to a file.

```{r}
write.csv(res, file="my_annotated_results.csv")
```

# Pathway Analysis

Find the biological pathways my differentially expressed genes participate in.

Install the packages needed for pathway analysis: Run in your R console (i.e. not in your Quarto doc)

```{r, message=FALSE}
library(gage)
library(gageData)
library(pathview)
```

Let's peek at the gageData

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

To run pathway analysis, we will use the `gage()` function and it requires a "vector of importance". We will use out log2FC results from our `res` object.

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

What is in the returned `keggres` object?

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

We can pass our foldchanges vector (our results) together with any of these highlighted pathway IDs to see how our genes overlap the pathway.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![The Asthma pathway overlaps with our differentially expressed genes](hsa05310.pathview.png)











