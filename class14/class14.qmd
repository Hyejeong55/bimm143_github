---
title: "Class 14: RNASeq Mini Project"
author: "Hyejeong Choi (PID: A16837133)"
format: pdf
toc: TRUE
---

Here we will perform a complete RNASeq analysis from counts to pathways and biological interpretation.

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703
The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.

# Required packages

```{r, message=FALSE}
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(pathview)
library(gage)
library(gageData)
```

# Data Import

```{r}
colData <- read.csv("GSE37704_metadata.csv", row.names = 1)
countData <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
```

```{r}
head(colData)
```

```{r}
head(countData)
```

# Make the columns and rows the same in the datasets

> Q. Complete the code below to remove the troublesome first column from countData.

Check the correspondence of colData rows and countData columns.

```{r}
rownames(colData)
```

remove the troublesome first column so we match the metadata 

```{r}
counts <- countData[,-1]
```


```{r}
rownames(colData) == colnames(counts)
```

# Remove zero count genes

> Q. Filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

We will have rows in `counts` for genes that we can not say anything about because they have zero expression in the particular tissue we are looking at.

```{r}
head(counts)
```

If the `rowSums()` is zero, then a given gene (i.e. row) has not count data and we should exclude these genes from further consideration.

```{r}
to.keep <- rowSums(counts) != 0
cleancounts <- counts[to.keep,]
```

> Q. How many genes so we have left?

```{r}
nrow(cleancounts)
```

# Setup for DESeq object for analysis

```{r}
dds <- DESeqDataSetFromMatrix(countData = cleancounts,
                              colData = colData,
                              design = ~condition)
```

# Run DESeq analysis

```{r}
dds <- DESeq(dds)
```

# Extract the results

```{r}
res <- results(dds)
head(res)
```

> Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```


# Add Gene annotation

> Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=rownames(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

# Save my results to a CSV file

> Q. Reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

# Result visualization

```{r}
mycols = rep("grey", nrow(res))
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$log2FoldChange >= 2] <- "blue"
mycols[res$padj >= 0.05] <- "grey"

plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=-2, col="red")
abline(v=2, col="red")
abline(h=-log(0.05), col="red")
```

> Q. Improve this plot by adding color and axis labels

```{r}
library(ggrepel)

ggplot(as.data.frame(res)) +
  aes(x=log2FoldChange, -log(padj)) +
  geom_point(col = mycols) +
  geom_vline(xintercept = c(-2, 2), col="red") +
  geom_hline(yintercept = -log(0.05), col="red") +
  labs(x="Log2 Fold Change", y="-log(p-value adjusted") +
  theme_bw()
```

# Pathway Analysis

```{r}
# sigmet.idx.hs index the signaling and metabolic pathways in keggs.sets.hs
# kegg.sets.hs has elements representing member gene ENTREZ IDs
data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only and exclude other pathways that are not of interest

kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Look at the first 3 pathways in the new dataset
head(kegg.sets.hs, 3)
```

```{r}
# the fold changes for the gene with the corresponding entrez ID
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results for pathway analysis
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

```{r, message=FALSE}
# get the pathview for the pathway "hsa04110"
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)

> Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
# Extract the top 5 down regulated pathways
keggres_down_pathways <- rownames(keggres$less)[1:5]

# Shows the 8 characters of the IDs of each string
keggres_down_ids = substr(keggres_down_pathways, start=1, stop=8)
keggres_down_ids
```

```{r, message=FALSE}
# Get the pathview for the down regulated pathways
pathview(gene.data=foldchanges, pathway.id=keggres_down_ids, species="hsa")
```
![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa03013.pathview.png)

![](hsa03440.pathview.png)

![](hsa04114.pathview.png)

## Gene Ontology (GO) genesets

```{r}
# go.sets.hs contains all of the GO terms
# go.subs.hs is a list that has indexes for BP, CC, and MF ontologies
data(go.sets.hs)
data(go.subs.hs)

# Extract the Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

# get the pathway analysis results
gobpres = gage(foldchanges, gsets=gobpsets)
```

```{r}
head(gobpres$less, 5)
```

## Reactome analysis online

We need to make a little file of our significant genes that we can upload to the reactome webpage:

```{r}
# extract genes with the statistical significance less than 0.05.

sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
sig_genes[6]
```
```{r}
# create the file for the significant genes

write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

![](R-HSA-69278.jpg)

> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The Cell Cycle has the most significant entities p-value. The Cell cycle is the most significant result in both methods, however, the other results are different. The second method using Reactome has pathways that are more specific and are apart of a larger pathway. The results listed in the KEGG are more general and broad.



